@model DisplayOnSamePageTesting.Models.ItemWithProperties

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            @Html.LabelFor(model => model.Id, "Item", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ItemId", null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Id)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Show" class="btn btn-default" />
            </div>
        </div>

        @if (Model != null)
        {
            <hr />
            <h2>Display after selecting the item</h2>
            <div class="form-group">
                @Html.LabelFor(model => model.EditableProperty, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EditableProperty, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EditableProperty, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConstantProperty, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConstantProperty, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>
            </div>
        }
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
